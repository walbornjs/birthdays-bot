#!/usr/bin/env python
# pylint: disable=unused-argument

import os
from dotenv import load_dotenv
from datetime import datetime, time, timezone, timedelta, date
import logging
import re

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from utils.ansii import totoro, meow, kaomoji, disnay
from utils.decline import decline_name
from utils.date import format_date
from utils.file import load, save

MOSCOW_TZ = timezone(timedelta(hours=3))

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
# HOUR = 9
# MINUTE = 0

HOUR = datetime.now(MOSCOW_TZ).hour
MINUTE = datetime.now(MOSCOW_TZ).minute + 1

logging.basicConfig(
  format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
  level=logging.INFO
)

DEFAULT_PERSONS = [
  {"name": "–ü–ª–∞—Ç–æ–Ω", "birthday": "2000-01-15"},
  {"name": "–ß–µ—Ä–Ω—ã–π –í–∏—Ç—è", "birthday": "2000-05-29"},
  {"name": "–≠–º–∏–ª—å", "birthday": "2000-12-08"},
  {"name": "–ê–Ω—è –ù–æ–≤–∏—Ü–∫–∞—è", "birthday": "2017-10-22"},
  {"name": "–ù–∏–Ω–∞ –ß–µ—Ä–Ω–∞—è", "birthday": "2020-08-18"},
  {"name": "–ê–≥–∞—Ç–∞", "birthday": "2019-06-20"},
  {"name": "–õ–µ–≤–æ–Ω", "birthday": "2018-06-10"},
  {"name": "–ú–∏—à–∞", "birthday": "2020-10-19"},
  {"name": "–ú–∏–ª–∞", "birthday": "2020-07-19"},
  {"name": "–ê–≤—Ä–æ—Ä–∞", "birthday": "2021-06-19"},
  {"name": "–í–µ—Ä–∞", "birthday": "2018-05-06"},
  {"name": "–ú–∏—Ä–∞", "birthday": "2020-11-06"},
  {"name": "–í–µ—Ä–æ–Ω–∏–∫–∞", "birthday": "2000-05-04"},
]

def get_persons():
  """Get current list of persons with parsed dates."""
  birthdays = load('birthdays.json', DEFAULT_PERSONS)
  persons = []
  for entry in birthdays:
    try:
      birthday = datetime.fromisoformat(entry["birthday"]).date()
      persons.append({
        "name": entry["name"],
        "birthday": birthday
      })
    except Exception as e:
      logging.error(f"Error parsing birthday for {entry.get('name', 'unknown')}: {e}")
  return persons


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Initializes the bot."""
  message_text = (
    f"üéÇ <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
    f"–Ø - <i>–±–æ—Ç-–æ-–¥–Ω—è—Ö-—Ä–æ–∂–¥–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å</i>.\n"
    f"–í—ã –≤—ã–ø—É—Å—Ç–∏–ª–∏ –º–µ–Ω—è –∏–∑ –∫—É–≤—à–∏–Ω–∞!\n<code>"
    f"<pre>{totoro}</pre>\n"
    f"\n\n... –∂–¥—ë–º üéÇ...</code>"
  )

  await update.message.reply_text(
    text=message_text,
    parse_mode="HTML"
  )

  await schedule_birthday_tasks(update, context.job_queue)


def get_job_data(update: Update, person) -> tuple:
  """Generate job data"""
  chat_id = update.effective_chat.id
  message_thread_id = update.effective_message.message_thread_id

  name = person["name"]
  bday = person["birthday"]

  return chat_id, message_thread_id, name, bday


def get_job_name(update: Update, person) -> str:
  """Generate job name"""
  chat_id, message_thread_id, name, bday = get_job_data(update, person)
  return f"{chat_id}_{message_thread_id}_{name}_{bday}"


def remove_existing_jobs(job_queue, job_name_base):
  """Remove existing jobs for a person"""
  removed_count = 0
  for job in job_queue.jobs():
    if job.name.startswith(job_name_base):
      job.schedule_removal()
      removed_count += 1
      logging.info(f"Removed existing job: {job.name}")
  return removed_count


async def check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Check what birthday notifications we have"""
  try:
    jobs = context.job_queue.jobs()
    
    if not jobs:
      message = (
        "üìÖ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–ù—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start"
      )
      return await update.message.reply_text(message, parse_mode="HTML")
    
    message_parts = []
    sorted_jobs = sorted(jobs, key=lambda x: x.next_t)
    
    for job in sorted_jobs:
      if hasattr(job, 'data') and 'name' in job.data:
        name = job.data['name']
        when = job.next_t.astimezone(MOSCOW_TZ)
        when_str = when.strftime("%d.%m.%Y %H:%M")
        reminder_type = "‚è≥ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" if "early" in job.name else "üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"
        message_parts.append(f"‚Ä¢ {reminder_type}: <b>{name}</b> - {when_str}")
    
    full_message = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n" + "\n".join(message_parts)
    await update.message.reply_text(full_message, parse_mode="HTML")
      
  except Exception as e:
    logging.error(f"Error in /check command: {e}", exc_info=True)
    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}", parse_mode="HTML")


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Remove all notification jobs."""
  try:
    jobs = context.job_queue.jobs()
    removed_count = 0
    
    for job in jobs:
      if (hasattr(job, 'data') and job.data.get('chat_id') == update.effective_chat.id):
        job.schedule_removal()
        removed_count += 1
    
    await update.message.reply_text(
      f"‚úã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <b>{removed_count}</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
      f"<b>–ú–∞–≤—Ä</b> —Å–¥–µ–ª–∞–ª —Å–≤–æ—ë –¥–µ–ª–æ,\n"
      f"<b>–ú–∞–≤—Ä</b> –º–æ–∂–µ—Ç —É—Ö–æ–¥–∏—Ç—å! üêº"
      f"\n\n<code>{disnay}</code>",
      parse_mode="HTML"
    )
    
  except Exception as e:
    logging.error(f"Error in stop command: {e}", exc_info=True)
    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}", parse_mode="HTML")

async def schedule_birthday_tasks(update: Update, job_queue) -> None:
  """Schedules tasks for sending birthday reminders."""
  now = datetime.now(MOSCOW_TZ)
  persons = get_persons()

  for person in persons:
    chat_id, message_thread_id, name, bday = get_job_data(update, person)
    
    when = datetime.combine(bday.replace(year=now.year), time(hour=HOUR, minute=MINUTE), tzinfo=MOSCOW_TZ)
    early = datetime.combine(bday.replace(year=now.year) - timedelta(days=10), time(hour=HOUR, minute=MINUTE), tzinfo=MOSCOW_TZ)
    
    if when < now: 
      when = when.replace(year=now.year + 1)
    if early < now: 
      early = early.replace(year=now.year + 1)
  
    job_data = {
      "chat_id": chat_id,
      "message_thread_id": message_thread_id,
      "name": name,
      "birthday": bday,
      "when": when,
      "early": early,
    }

    base_job_name = get_job_name(update, person)
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    remove_existing_jobs(job_queue, base_job_name)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
    job_queue.run_once(
      callback=send_birthday_reminder_and_create_next,
      when=when,
      data=job_data,
      name=base_job_name
    )

    job_queue.run_once(
      callback=send_early_birthday_reminder_and_create_next,
      when=early,
      data=job_data,
      name=f"{base_job_name}_early"
    )
  
    logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {decline_name(name, 'gent')} –Ω–∞ {when}")


async def send_birthday_reminder_and_create_next(context: ContextTypes.DEFAULT_TYPE) -> None:
  """Sends a birthday reminder and schedules the next one"""
  job = context.job
  name = job.data["name"]
  birthday = job.data["birthday"]
  chat_id = job.data["chat_id"]
  message_thread_id = job.data["message_thread_id"]

  try:
    age = datetime.now().year - birthday.year
    message_text = (
      f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{decline_name(name, 'gent')}</b>!\n\n"
      f"üéÇ {decline_name(name, 'datv')} –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è {age} –ª–µ—Ç!\n\n"
      f"<code>{meow}</code>\n\n"
      f"... –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ..."
    )
    await context.bot.send_message(
      chat_id=chat_id,
      message_thread_id=message_thread_id,
      text=message_text,
      parse_mode="HTML",
    )

    logging.info(f"Sent birthday notification for {name}")
  except Exception as e:
    logging.error(f"Error sending birthday notification: {e}", exc_info=True)
  
  # Schedule next year's notification
  try:
    next_year = datetime.now(MOSCOW_TZ).year + 1
    next_bday = birthday.replace(year=next_year)
    when = datetime.combine(next_bday, time(hour=HOUR, minute=MINUTE), tzinfo=MOSCOW_TZ)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    job.data["when"] = when
    job.data["birthday"] = next_bday
    
    context.job_queue.run_once(
      callback=send_birthday_reminder_and_create_next,
      when=when,
      data=job.data,
      name=job.name
    )
    logging.info(f"Rescheduled birthday notification for {decline_name(name, 'gent')} to {when}")
  except Exception as e:
    logging.error(f"Error rescheduling birthday notification: {e}", exc_info=True)


async def send_early_birthday_reminder_and_create_next(context: ContextTypes.DEFAULT_TYPE) -> None:
  """Sends an early birthday reminder and schedules the next one"""
  job = context.job
  name = job.data["name"]
  birthday = job.data["birthday"]
  chat_id = job.data["chat_id"]
  message_thread_id = job.data["message_thread_id"]

  try:
    message_text = (
      f"‚è≥ <b>–°–∫–æ—Ä–æ</b> –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{decline_name(name, 'gent')}</b>!\n\n"
      f"üéÇ {format_date(birthday)}!\n\n"
      f"<pre>{kaomoji}</pre>\n\n"
      f"... –≥–æ—Ç–æ–≤–∏–º –ø–æ–¥–∞—Ä–∫–∏ ..."
    )
    await context.bot.send_message(
      chat_id=chat_id,
      message_thread_id=message_thread_id,
      text=message_text,
      parse_mode="HTML",
    )
  except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}", exc_info=True)
  
  # Schedule next year's early reminder
  try:
    next_year = datetime.now(MOSCOW_TZ).year + 1
    next_bday = birthday.replace(year=next_year)
    early = datetime.combine(next_bday - timedelta(days=10), time(hour=HOUR, minute=MINUTE), tzinfo=MOSCOW_TZ)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    job.data["early"] = early
    job.data["birthday"] = next_bday
    
    context.job_queue.run_once(
      callback=send_early_birthday_reminder_and_create_next,
      when=early,
      data=job.data,
      name=job.name
    )
    logging.info(f"Rescheduled early notification for {decline_name(name, 'gent')} to {early}")
  except Exception as e:
    logging.error(f"Error rescheduling early notification: {e}", exc_info=True)


async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """List all birthdays"""
  try:
    persons = get_persons()
    persons.sort(key=lambda x: (x["birthday"].month, x["birthday"].day))
    
    chunks = ["üéÇ <b>–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:</b>\n"]
    current_year = datetime.now().year
    
    for person in persons:
      name = person["name"]
      birthday = person["birthday"]
      age = current_year - birthday.year
      chunks.append(f"‚Ä¢ <b>{name}</b> - {format_date(birthday)} ({age} –ª–µ—Ç)")
    
    await update.message.reply_text("\n".join(chunks), parse_mode="HTML")
      
  except Exception as e:
    logging.error(f"Error in list_birthdays: {e}", exc_info=True)
    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}", parse_mode="HTML")


async def add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Add new birthday to the list"""
  try:
    args = context.args
    if len(args) < 2:
      await update.message.reply_text(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–ò–º—è> <–î–î.–ú–ú.–ì–ì–ì–ì>\n"
        "–ü—Ä–∏–º–µ—Ä: /add –ê–Ω–Ω–∞ 15.05.1990"
      )
      return

    name = " ".join(args[:-1])
    date_str = args[-1]
    
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_str):
      await update.message.reply_text(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990)"
      )
      return

    try:
      birth_date = datetime.strptime(date_str, "%d.%m.%Y").date()
      if birth_date > date.today():
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
        return
    except ValueError:
      await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
      return

    persons = get_persons()
    if any(p["name"].lower() == name.lower() for p in persons):
      await update.message.reply_text(f"‚ùå –ò–º—è '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
      return

    new_entry = {"name": name, "birthday": birth_date.isoformat()}
    current_data = load('birthdays.json', DEFAULT_PERSONS)
    current_data.append(new_entry)
    save('birthdays.json', current_data)

    await schedule_birthday_tasks(update, context.job_queue)
    
    await update.message.reply_text(
      f"‚úÖ <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ —Å–ø–∏—Å–æ–∫!\n"
      f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {format_date(birth_date)}",
      parse_mode="HTML"
    )
    
  except Exception as e:
    logging.error(f"Error in add_birthday: {e}", exc_info=True)
    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}", parse_mode="HTML")


async def remove_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Remove birthday from the list"""
  try:
    if not context.args:
      await update.message.reply_text(
        "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove <–ò–º—è>\n"
        "–ü—Ä–∏–º–µ—Ä: /remove –ê–Ω–Ω–∞"
      )
      return

    name_to_remove = " ".join(context.args).strip()
    if not name_to_remove:
      await update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
      return

    current_data = load('birthdays.json', DEFAULT_PERSONS)
    original_count = len(current_data)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
    filtered_data = [p for p in current_data if p["name"].lower() != name_to_remove.lower()]
    
    if len(filtered_data) == original_count:
      await update.message.reply_text(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: '{name_to_remove}'")
      return

    save('birthdays.json', filtered_data)
    
    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    persons = get_persons()
    removed_person = next((p for p in persons if p["name"].lower() == name_to_remove.lower()), None)
    
    if removed_person:
      chat_id = update.effective_chat.id
      message_thread_id = update.effective_message.message_thread_id
      base_job_name = f"{chat_id}_{message_thread_id}_{removed_person['name']}_{removed_person['birthday']}"
      jobs_removed = remove_existing_jobs(context.job_queue, base_job_name)
    else:
      jobs_removed = 0

    await update.message.reply_text(
      f"‚úÖ <b>{name_to_remove}</b> —É–¥–∞–ª–µ–Ω(–∞) –∏–∑ —Å–ø–∏—Å–∫–∞!\n"
      f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {jobs_removed}",
      parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∂–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await list_birthdays(update, context)
    
  except Exception as e:
    logging.error(f"Error in remove_birthday: {e}", exc_info=True)
    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", parse_mode="HTML")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Show help information."""
  help_text = (
    f"üéÇ <b>Birthday Bot - –ö–æ–º–∞–Ω–¥—ã</b>\n\n"
    f"<b>/start</b> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
    f"<b>/add &lt;–ò–º—è&gt; &lt;–î–î.–ú–ú.–ì–ì–ì–ì&gt;</b> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
    f"<b>/remove &lt;–ò–º—è&gt;</b> - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
    f"<b>/list</b> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
    f"<b>/check</b> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
    f"<b>/stop</b> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
    f"<b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
    f"<i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</i>\n"
    f"‚Ä¢ –ó–∞ 10 –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è\n"
    f"‚Ä¢ –í —Å–∞–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
    f"<i>–í—Ä–µ–º—è: 9:00 –ú–°–ö</i>"
  )

  await update.message.reply_text(help_text, parse_mode="HTML")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
  await update.message.reply_text(
    f"<b>‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
    parse_mode="HTML"
  )


def main() -> None:
  if not TOKEN: 
    return logging.error("–¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_TOKEN –≤ .env")

  application = Application.builder().token(TOKEN).build()

  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
  handlers = [
    CommandHandler("start", start),
    CommandHandler("stop", stop),
    CommandHandler("check", check),
    CommandHandler("list", list_birthdays),
    CommandHandler("add", add_birthday),
    CommandHandler("remove", remove_birthday),
    CommandHandler("help", help_command),
    MessageHandler(filters.COMMAND, unknown)
  ]
  
  for handler in handlers:
    application.add_handler(handler)

  # application.run_polling(allowed_updates=Update.ALL_TYPES)

  return application 


if __name__ == "__main__":
  main()
#!/usr/bin/env python
# pylint: disable=unused-argument

import os
from dotenv import load_dotenv
from datetime import datetime, time, timezone, timedelta, date
import logging
import locale
from pymorphy3 import MorphAnalyzer

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

MOSCOW_TZ = timezone(timedelta(hours=3))

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
HOUR = 9
MINUTE = 0

logging.basicConfig(
  format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
  level=logging.INFO
)

morph = MorphAnalyzer()

def decline_name(name, case):
  parsed = morph.parse(name)[0]
  return parsed.inflect({case}).word.capitalize() if parsed.inflect({case}) else name

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
PERSONS = [
  {"name": "–ü–ª–∞—Ç–æ–Ω", "birthday": date(2000, 1, 15)}, # 15.01.2000
  {"name": "–ß–µ—Ä–Ω—ã–π –í–∏—Ç—è", "birthday": date(2000, 5, 29)}, # 29.05.2000
  {"name": "–≠–º–∏–ª—å", "birthday": date(2000, 12, 8)}, # 08.12.2000
  {"name": "–ê–Ω—è –ù–æ–≤–∏—Ü–∫–∞—è", "birthday": date(2017, 10, 22)}, # 22.10.2017
  {"name": "–ù–∏–Ω–∞ –ß–µ—Ä–Ω–∞—è", "birthday": date(2020, 8, 18)}, # 18.08.2020
  {"name": "–ê–≥–∞—Ç–∞", "birthday": date(2019, 6, 20)}, # 20.06.2019
  {"name": "–õ–µ–≤–æ–Ω", "birthday": date(2018, 6, 10)}, # 10.06.2018
  {"name": "–ú–∏—à–∞", "birthday": date(2020, 10, 19)}, # 20.10.2020
  {"name": "–ú–∏–ª–∞", "birthday": date(2020, 7, 19)}, # 19.07.2020
  {"name": "–ê–≤—Ä–æ—Ä–∞", "birthday": date(2021, 6, 19)}, # 19.06.2021
  {"name": "–í–µ—Ä–∞", "birthday": date(2018, 5, 6)}, # 05.06.2018
  {"name": "–ú–∏—Ä–∞", "birthday": date(2020, 11, 6)}, # 06.11.2020
  {"name": "–í–µ—Ä–æ–Ω–∏–∫–∞", "birthday": date(2000, 5, 4)}, # 04.05.2000
]

try:
  locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
  locale.setlocale(locale.LC_TIME, 'ru_RU')

def format_date(date):
  try:
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥: "%d %B" ‚Üí –¥–µ–Ω—å + –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    return date.strftime("%-d %B").lower()
  except (ValueError, AttributeError):
    month_names = {
      1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
      5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
      9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    return f"{date.day} {month_names[date.month]}"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Initializes the bot."""
  message_text = (
    f"üéÇ <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
    f"–Ø - <i>–±–æ—Ç-–æ-–¥–Ω—è—Ö-—Ä–æ–∂–¥–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å</i>.\n"
    f"–í—ã –≤—ã–ø—É—Å—Ç–∏–ª–∏ –º–µ–Ω—è –∏–∑ –∫—É–≤—à–∏–Ω–∞!\n<code>"
    f"‚†Ä‚†Ä‚†Ä‚†Ä‚£∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∂‚°Ü‚†Ä‚†Ä‚†Ä\n"
    f"‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚°á‚†Ä‚†Ä‚†Ä\n"
    f"‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä\n"
    f"‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚£§‚£§‚£§‚£§‚£º‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä\n"
    f"‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä\n"
    f"‚†Ä‚†Ä‚¢†‚£ø‚°É‚£¶‚¢π‚£ø‚£ü‚£ô‚£ø‚£ø‚†∞‚°Ä‚£ø‚£á‚†Ä‚†Ä\n"
    f"‚††‚†¨‚£ø‚£ø‚£∑‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£æ‚£ø‚£ø‚°≠‚†§\n"
    f"‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚†õ‚†õ‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚°Ä\n"
    f"‚¢∞‚£ø‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ø‚£ø‚£ø‚£ß\n"
    f"‚¢∏‚£ø‚£ø‚†É‚†ú‚†õ‚†Ç‚†Ä‚†ã‚†â‚†É‚†ê‚†õ‚†ª‚†Ñ‚¢ø‚£ø‚£ø\n"
    f"‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø\n"
    f"‚†ò‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚°è\n"
    f"‚†Ä‚†à‚†ª‚†ø‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£†‚†æ‚†ü‚†ã‚†Ä\n\n\n"
    f"... –∂–¥—ë–º üéÇ...</code>"
  )
  await update.message.reply_text(
    text=message_text,
    parse_mode="HTML"
  )

  await schedule_birthday_tasks(update, context.job_queue)


def get_job_data(update: Update, person) -> tuple:
  """Generate job data"""
  chat_id = update.effective_message.chat_id
  thread_id = update.effective_message.message_thread_id

  name = person["name"]
  bday = person["birthday"]

  return chat_id, thread_id, name, bday


def get_job_name(update: Update, person) -> str:
  """Generate job name"""
  chat_id, thread_id, name, bday = get_job_data(update, person)
  # when = datetime.combine(bday, time(hour=9, minute=0), tzinfo=MOSCOW_TZ)
  return f"{chat_id}_{thread_id}_{name}_{bday}"


async def check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Check what birthdays notifications we have"""

  for person in PERSONS:
    job_name = get_job_name(update, person)
    jobs = context.job_queue.get_jobs_by_name(job_name)
    if not jobs:
      text = f"ü•∏ –ù–µ—É–∂–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {person['name']} –Ω–µ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?"
      await update.effective_message.reply_text(text)
    else:
      text = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {person['name']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
      await update.effective_message.reply_text(text)


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Remove the notification job."""
  for person in PERSONS:
    job_name = get_job_name(update, person)
    jobs = context.job_queue.get_jobs_by_name(job_name)
    for job in jobs:
      job.schedule_removal()
    if jobs:
      text = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {person['name']} –æ—Ç–º–µ–Ω–µ–Ω–æ!"
      await update.effective_message.reply_text(text)

  await update.message.reply_text(f"–ë–æ—Ç —É–µ—Ö–∞–ª –Ω–∞ –∫–∞–Ω–∏–∫—É–ª—ã! üå¥")


async def schedule_birthday_tasks(update: Update, job_queue) -> None:
  """Shedules tasks for sending birthday reminders."""
  now = datetime.now(MOSCOW_TZ)

  for person in PERSONS:
    chat_id, message_thread_id, name, bday = get_job_data(update, person)
    
    when = datetime.combine(bday.replace(year=now.year), time(hour=HOUR, minute=MINUTE), tzinfo=MOSCOW_TZ)
    # when = datetime.combine(bday.replace(year=now.year), time(hour=now.hour, minute=now.minute, second=now.second + 3), tzinfo=MOSCOW_TZ)
    # early = datetime.combine(bday.replace(year=now.year) - timedelta(days=10), time(hour=HOUR + 1, minute=MINUTE), tzinfo=MOSCOW_TZ)
    early = datetime.combine(bday.replace(year=now.year) - timedelta(days=10), time(hour=now.hour, minute=now.minute, second=now.second + 3), tzinfo=MOSCOW_TZ)
    if when < now: when = when.replace(year=now.year + 1)
    if early < now: early = early.replace(year=now.year + 1)
  
    job_data = {
      "chat_id": chat_id,
      "message_thread_id": message_thread_id,
      "name": name,
      "birthday": bday,
      "when": when,
      "early": early,
    }

    job_name = get_job_name(update, person)

    job_queue.run_once(
      callback=send_birthday_reminder_and_create_next,
      when=when,
      data=job_data,
      name=job_name
    )

    job_queue.run_once(
      callback=send_early_birthday_reminder_and_create_next,
      when=early,
      data=job_data,
      name=f"{job_name}_early"
    )
  
    logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {decline_name(name, 'gent')} –Ω–∞ {when}")


async def send_birthday_reminder_and_create_next(context: ContextTypes.DEFAULT_TYPE) -> None:
  """Sends a birthday reminder and schedules the next one"""
  job = context.job
  name = job.data["name"]
  birthday = job.data["birthday"]
  chat_id = job.data["chat_id"]
  message_thread_id = job.data["message_thread_id"]

  try:
    message_text = (
      f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{decline_name(name, 'gent')}</b><code>!\n\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ñ‚†ô‚°¢‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚°ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†∂‚†û‚†õ‚†ø‚£ø‚£ø‚°ø‚£ø‚£á‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚†ã‚¢†‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚°â‚†à‚†õ‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚¢¶‚£¥‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚†Å‚£Ä‚°Ñ‚†Ä‚†π‚£Ü‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†ì‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†â‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†π‚£Ü‚†Ä‚†Ä\n"
      f"‚¢†‚£í‚£ä‚¢ç‚£©‚¢ô‚£©‚£ç‚°©‚°á‚†Ä‚†Ä‚¢∏‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ä‚†Ä\n"
      f"‚£∏‚£Ä‚£à‚£Å‚£Ä‚£â‚£Ä‚£Ä‚£†‚£á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°Ü‚†ò‚£á‚†Ä\n"
      f"‚†â‚†â‚†â‚†õ‚†ø‚†ª‚£Ø‚†â‚†â‚†â‚†Ä‚¢Ä‚£æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢ø‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢≥‚£Ñ‚†Ä‚¢†‚°û‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢∏‚°á\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ã‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†Å‚†Ä‚†ò‚£á\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚†Ä‚†Ä‚†Ä‚£ø\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ü‚†Å‚†Ä‚†Ä‚¢ª\n\n"
      f"... –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ...</code>"
    )
    await context.bot.send_message(
      chat_id=chat_id,
      message_thread_id=message_thread_id,
      text=message_text,
      parse_mode="HTML",
    )
  except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
  
  # Planning the next birthday reminder (in the next year)
  next_year = datetime.now(MOSCOW_TZ).year + 1
  next_bday = birthday.replace(year=next_year)
  when = datetime.combine(next_bday, time(hour=HOUR, minute=MINUTE), tzinfo=MOSCOW_TZ)

  context.job_queue.run_once(
    callback=send_birthday_reminder_and_create_next,
    when=when,
    data=job.data,
    name=job.name
  )
  logging.info(f"–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {decline_name(name, 'gent')} –Ω–∞ {when}")


async def send_early_birthday_reminder_and_create_next(context: ContextTypes.DEFAULT_TYPE) -> None:
  """Sends an early birthday reminder and schedules the next one"""
  job = context.job
  name = job.data["name"]
  birthday = job.data["birthday"]
  chat_id = job.data["chat_id"]
  message_thread_id = job.data["message_thread_id"]

  try:
    message_text = (
      f"‚è≥ <b>–°–∫–æ—Ä–æ</b> –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{decline_name(name, 'gent')}</b>!\n\n"
      f"üéÇ {format_date(birthday)}!\n\n<code>"
      f"              ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£û‚†á‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢∂‚£Ñ‚¢∏‚¢∏‚†Ä‚¢Ä‚£¥‚°ø‚†ã‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†§‚£§‚£†‚†§‚†§‚£å‚£ª‚£ø‚†ò‚£ß‚¢ª‚°Ø‚¢ö‚°≠‚†í‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚†∂‚£Ü‚£†‚£î‚°í‚†ö‚†õ‚†ì‚†Ä‚†à‚†â‚†Ä‚†Å‚†â‚†Ä‚†â‚†â‚†â‚†â‚¢ë‚†¢‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ö‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£ó‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚¢Ø‚°∂‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚°¥‚°Ñ‚††‚£Ñ‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢£‚°Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£°‚†è‚¢Ä‚†Ä‚¢Ä‚£¥‚†Ç‚°î‚¢Ä‚£¥‚£è‚°º‚†Å‚†ò‚¢¶‚°ô‚¢∑‚¢§‚°à‚¢≥‚¢§‚°Ä‚°Ä‚¢†‚†∏‚£é‚°á‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚£û‚£•‚£æ‚°É‚¢†‚†ã‚£º‚£æ‚££‚†ã‚¢∏‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚†∑‚†å‚†ª‚†á‚†ô‚¢∑‚¢∏‚¢∑‚†ã‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢õ‚°ü‚†Ä‚°á‚°§‚†ü‚†∫‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†§‚††‚¢º‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚¢é‚£†‚°¥‚†õ‚††‚£∂‚°Ü‚†ò‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†Å‚¢∞‚£∂‚†Ä‚°∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†©‚¢Ø‚£¶‚†ü‚†¶‚£å‚°†‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†É‚†Ä‚†Ä‚†Ä‚†à‚†£‚°Ñ‚£Ä‚†¥‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†Ä‚†§‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°†‚†ñ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ì‚¢¶‚°Ä‚†Ä‚†Ä‚°ú‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†í‚†ì‚†¶‚£Ä‚†Ä‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°†‚†û‚†¢‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ö‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†â‚†ë‚†í‚†§‚†Ñ‚†Ñ‚†§‚†Ä‚†§‚††‚†§‚†Ñ‚†í‚†Ç‚¢°‚†Ä‚†Ä‚†Ä‚†à‚†ë‚¢¶‚°Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†É‚†Ä‚†Ä‚††‚£Ä‚°Ä‚†Ä‚¢ò‚£Ü‚¢Ä‚°§‚†î‚†í‚†ä‚†à‚†Å‚†à‚†â‚†í‚†í‚¢§‚£†‚†É‚†Ä‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚£π‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚°æ‚†ã‚†ô‚†∂‚¢µ‚£§‚†ã‚°û‚¢Å‚°†‚†î‚†Ç‚†à‚†Ä‚†Ä‚†Ä‚†à‚†â‚†í‚¢¶‚°ò‚°è‚°¶‚†•‚†∂‚†Æ‚†å‚¢≤‚†Å‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†¥‚°é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°Å‚¢≥‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚¢É‚£º‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ß‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚°∞‚†ã‚†Ä‚†≥‚£Ñ‚£Ä‚£Ä‚£Ä‚°†‚†§‚£ù‚†≤‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£†‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚¢§‚°Ä\n"
      f"‚†Ä‚¢Ä‚°û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†í‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°è‚†Å‚†Ä‚†â‚†í‚†§‚†í‚†ã‚†Ä‚†Ä‚¢π\n"
      f"‚¢†‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏\n"
      f"‚†∏‚°§‚†§‚†í‚†í‚¢≤‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£Ü‚†Ç‚†à‚†Å‚†â‚†â‚†â‚†â‚†â‚¢í‚°º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ú\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†±‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚£í‚£í‚£Ç‚†§‚†î‚†í‚†ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚°è‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°Ñ‚†à‚†í‚†§‚£Ä‚£Ä‚†§‚†Ñ‚†í‚†ä‚†â‚†Å‚†Ä‚†Ä‚†à‚†â‚†ë‚†¢‚¢Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚†ö‚†Å‚†Ä‚°á‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†ã‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Å‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†è‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ë‚†í‚†ò‚†¢‚¢Ñ‚£Ä‚†Ä‚†Ä‚¢Ñ‚£Ä‚††‚†û‚†â‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚£Ä‚†§‚†Ñ‚†ö‚†Å‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ë‚°ñ‚†í‚†à‚°Ω‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ä‚†Ä‚¢∏‚†ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚¢∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚¢Ä‚°†‚†§‚†í‚†í‚†í‚†É‚†Ä‚†ò‚†¶‚¢Ñ‚£Ä‚°Ä‚†Ä‚†Ä‚¢†‚†Å‚†Ä‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚†µ‚†∂‚†ê‚†í‚¢≤‚†û‚†Ä‚¢Ä‚°§‚†Ä‚†§‚¢Ñ‚¢â‚°∂‚†ñ‚†ã‚†Ä‚†Ä‚†à‚¢≠‚°â‚†â‚†í‚†≤‚†§‚°Ä‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚¢É‚£†‚†¥‚†ã‚†Ä‚†Ä‚†Ä‚¢†‚¢ã‚£Ä‚†§‚†í‚†í‚†í‚†¶‚£Ñ‚†à‚†ª‚°Ö‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä\n"
      f"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ì‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\n"
      f"... –≥–æ—Ç–æ–≤–∏–º –ø–æ–¥–∞—Ä–∫–∏ ...</code>"
    )
    await context.bot.send_message(
      chat_id=chat_id,
      message_thread_id=message_thread_id,
      text=message_text,
      parse_mode="HTML",
    )
  except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
  
  # Planning the next birthday reminder (in the next year)
  next_year = datetime.now(MOSCOW_TZ).year + 1
  next_bday = birthday.replace(year=next_year)
  early = datetime.combine(next_bday, time(hour=HOUR + 1, minute=MINUTE), tzinfo=MOSCOW_TZ)

  context.job_queue.run_once(
    callback=send_early_birthday_reminder_and_create_next,
    when=early,
    data=job.data,
    name=job.name
  )
  logging.info(f"–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {decline_name(name, 'gent')} –Ω–∞ {early}")


def main() -> None:
  if not TOKEN: return logging.error("–¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_TOKEN –≤ .env")

  application = Application.builder().token(TOKEN).build()

  application.add_handler(CommandHandler("start", start))
  application.add_handler(CommandHandler("stop", stop))
  application.add_handler(CommandHandler("check", check))

  # schedule_birthday_tasks(application.job_queue)

  application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
  main()